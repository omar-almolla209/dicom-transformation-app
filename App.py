# app.py



import streamlit as st

import pydicom

import numpy as np

import matplotlib.pyplot as plt

from skimage.filters.rank import entropy

from skimage.morphology import disk

from skimage import img_as_ubyte, exposure

from skimage.filters import sobel, laplace, unsharp_mask

from skimage.feature import canny

import os



# Funzione salvataggio immagini

def salva_fig(path_output, fig=None):

Â  Â  os.makedirs(os.path.dirname(path_output), exist_ok=True)

Â  Â  if fig is None:

Â  Â  Â  Â  plt.savefig(path_output, bbox_inches='tight', dpi=300)

Â  Â  else:

Â  Â  Â  Â  fig.savefig(path_output, bbox_inches='tight', dpi=300)



# Titolo interfaccia

st.set_page_config(layout="wide")

st.title("ðŸ§  Analisi Immagini DICOM â€“ Supporto Visivo per Medici")



# Upload file DICOM

uploaded_files = st.file_uploader("ðŸ“¤ Carica uno o piÃ¹ file DICOM", type=None, accept_multiple_files=True)



if uploaded_file:

Â  Â  dcm = pydicom.dcmread(uploaded_file)

Â  Â  img = dcm.pixel_array

Â  Â  img_norm = (img - np.min(img)) / (np.max(img) - np.min(img))

Â  Â  img_uint8 = img_as_ubyte(img_norm)



Â  Â  st.subheader("ðŸ“¸ Immagine Originale")

Â  Â  fig, ax = plt.subplots(figsize=(6,6))

Â  Â  ax.imshow(img, cmap='gray')

Â  Â  ax.set_title("Immagine DICOM Originale")

Â  Â  ax.axis('off')

Â  Â  st.pyplot(fig)





Â  Â  # Checkbox per ogni trasformazione

Â  Â  col1, col2 = st.columns(2)

Â  Â  with col1:

Â  Â  Â  Â  do_entropy = st.checkbox("Mappa di Entropia Locale")

Â  Â  Â  Â  do_edges = st.checkbox("Edge Detection: Sobel, Laplaciano, Canny")

Â  Â  Â  Â  do_overlay = st.checkbox("Overlay dei bordi Canny")



Â  Â  with col2:

Â  Â  Â  Â  do_eq = st.checkbox("Equalizzazione Istogramma")

Â  Â  Â  Â  do_sharp = st.checkbox("Filtro Unsharp Mask (Velvet-like)")



Â  Â  base_filename = os.path.splitext(uploaded_file.name)[0]

Â  Â  output_dir = "transformations"

Â  Â  os.makedirs(output_dir, exist_ok=True)



Â  Â  # Esecuzione trasformazioni selezionate

Â  Â  if do_entropy:

Â  Â  Â  Â  entropia = entropy(img_uint8, disk(5))

Â  Â  Â  Â  plt.figure(figsize=(6,6))

Â  Â  Â  Â  plt.imshow(entropia, cmap='inferno')

Â  Â  Â  Â  plt.title('Mappa di Entropia Locale')

Â  Â  Â  Â  plt.axis('off')

Â  Â  Â  Â  plt.colorbar()

Â  Â  Â  Â  salva_fig(f'{output_dir}/{base_filename}_entropy_map.png')

Â  Â  Â  Â  st.pyplot(plt)

Â  Â  Â  Â  plt.close()



Â  Â  if do_edges:

Â  Â  Â  Â  edges_sobel = sobel(img)

Â  Â  Â  Â  edges_laplace = laplace(img)

Â  Â  Â  Â  edges_canny = canny(img_norm, sigma=1)

Â  Â  Â  Â  fig, axs = plt.subplots(1, 3, figsize=(15, 5))

Â  Â  Â  Â  axs[0].imshow(edges_sobel, cmap='gray')

Â  Â  Â  Â  axs[0].set_title('Bordi - Sobel')

Â  Â  Â  Â  axs[0].axis('off')

Â  Â  Â  Â  axs[1].imshow(edges_laplace, cmap='gray')

Â  Â  Â  Â  axs[1].set_title('Bordi - Laplaciano')

Â  Â  Â  Â  axs[1].axis('off')

Â  Â  Â  Â  axs[2].imshow(edges_canny, cmap='gray')

Â  Â  Â  Â  axs[2].set_title('Bordi - Canny')

Â  Â  Â  Â  axs[2].axis('off')

Â  Â  Â  Â  plt.tight_layout()

Â  Â  Â  Â  salva_fig(f'{output_dir}/{base_filename}_edges_all.png', fig)

Â  Â  Â  Â  st.pyplot(fig)

Â  Â  Â  Â  plt.close()



Â  Â  if do_eq:

Â  Â  Â  Â  img_eq = exposure.equalize_hist(img_norm)

Â  Â  Â  Â  plt.figure(figsize=(6,6))

Â  Â  Â  Â  plt.imshow(img_eq, cmap='gray')

Â  Â  Â  Â  plt.title('Equalizzazione Istogramma')

Â  Â  Â  Â  plt.axis('off')

Â  Â  Â  Â  salva_fig(f'{output_dir}/{base_filename}_equalized_histogram.png')

Â  Â  Â  Â  st.pyplot(plt)

Â  Â  Â  Â  plt.close()



Â  Â  if do_sharp:

Â  Â  Â  Â  img_sharp = unsharp_mask(img_norm, radius=1.0, amount=1.5)

Â  Â  Â  Â  plt.figure(figsize=(6,6))

Â  Â  Â  Â  plt.imshow(img_sharp, cmap='gray')

Â  Â  Â  Â  plt.title('Filtro Unsharp Mask (Velvet-like)')

Â  Â  Â  Â  plt.axis('off')

Â  Â  Â  Â  salva_fig(f'{output_dir}/{base_filename}_unsharp_mask.png')

Â  Â  Â  Â  st.pyplot(plt)

Â  Â  Â  Â  plt.close()



Â  Â  if do_overlay:

Â  Â  Â  Â  if 'edges_canny' not in locals():

Â  Â  Â  Â  Â  Â  edges_canny = canny(img_norm, sigma=1)

Â  Â  Â  Â  overlay = np.stack([img_norm]*3, axis=-1)

Â  Â  Â  Â  overlay[edges_canny, 0] = 1

Â  Â  Â  Â  overlay[edges_canny, 1] = 0

Â  Â  Â  Â  overlay[edges_canny, 2] = 0

Â  Â  Â  Â  plt.figure(figsize=(6,6))

Â  Â  Â  Â  plt.imshow(overlay)

Â  Â  Â  Â  plt.title('Overlay Bordi (Canny) su Immagine Originale')

Â  Â  Â  Â  plt.axis('off')

Â  Â  Â  Â  salva_fig(f'{output_dir}/{base_filename}_overlay_edges_on_original.png')

Â  Â  Â  Â  st.pyplot(plt)

Â  Â  Â  Â  plt.close()
